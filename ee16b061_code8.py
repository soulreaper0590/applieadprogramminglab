import pylab as p
from sympy import *
#from sympy.parsing.sympy_parser import parse_expr
import scipy.signal as sp
import numpy as npm
def lowpass(R1, R2, C1, C2, G, G1, Vi):
    print R1, R2, C1, C2
    s = symbols('s')
    a = Vi/(R1)
    Gm = Matrix([[0,0,1,-1/G],[-1/(1+s*C2*R2),1,0,0],[0,-G1,G1,1],[-1/R1-1/R2-s*C1,1/R2,0,s*C1]])
    I = Matrix([[0],[0],[0],[-a]])
    V = Gm.inv()*I
    return (Gm,I,V)
def highpass(R1, R2, C1, C2, G, G1, Vi):
    s = symbols('s')
    a = Vi*s*C1
    Gm = Matrix([[0,0,-G,1],[-s*C2*R2,1+s*C2*R2,0,0],[0,-G1,G1,1],[s*C1+s*C2+1/R1,-s*C2,0,-1/R1]])
    I = Matrix([[0],[0],[0],[a]])
    V = Gm.inv()*I
    X = V.evalf()
    return (Gm,I,V)
def get_lti(expr):
    s = symbols("s")
    num, denom = expr.as_numer_denom()
    nm = npm.array(Poly(num, s).all_coeffs(),npm.dtype(float))
    dm = npm.array(Poly(denom, s).all_coeffs(),npm.dtype(float))
    return sp.lti(nm,dm)
#--------------- impulse response
s = symbols("s")
A,b,V=lowpass(1e4,1e4,1e-9,1e-9,1.586,1000,1)
Vo=V[3].evalf()
H1 = get_lti(Vo)
x,t = sp.impulse(H1, None , npm.linspace(0,10**-3,10000))
p.plot(x,t)
p.title("time domain impulse response")
p.xlabel("time")
p.ylabel("h(t)")
p.grid(True)
#p.show()
w=p.logspace(0,8,801)
ss=1j*w
hf=lambdify(s,Vo,'numpy')
v=hf(ss)
p.loglog(w,abs(v),lw=2)
p.xlabel("frequency")
p.ylabel("H(jw)")
p.grid(True)
p.title("impulse response in frequency domain")
#p.show()
#------------------step response
A,b,V=lowpass(1e4,1e4,1e-9,1e-9,1.586,1000,1/s)
Vo=V[3]
pprint (Vo)
X1 = get_lti(Vo)
t,x = sp.impulse(X1,None,npm.linspace(0,10**-3,10000))
p.plot(t,x)
p.xlabel("time")
p.ylabel("H(t)")
p.grid(True)
p.title("step response in time domain")
#p.show()
w=p.logspace(0,12,801)
ss=1j*w
hf=lambdify(s,Vo,'numpy')
v=hf(ss)
p.loglog(w,abs(v),lw=2)
p.grid(True)
p.xlabel("frequency")
p.ylabel("H(jw)")
p.grid(True)
p.title("step response in frequency domain")
#p.show()


#------------------
t  = npm.linspace(0,10**-3,100001)
V_i = p.sin((2*3.14*10**3)*t) + p.cos((2*3.14*10**6)*t)
t,V,svsec = sp.lsim(H1,V_i,t)
p.plot(t,V)
p.xlabel("Time")
p.ylabel("Output")
p.title("plot of the out by the lowpass filter")
p.grid(True)
#p.show()
#--------------highpass tranfer function
s = symbols("s")
A,b,V=highpass(1e4,1e4,1e-9,1e-9,1.586,1000,1)
Vo=V[3].evalf()
H1 = get_lti(Vo)
print (H1)
x,t = sp.impulse(H1, None , npm.linspace(0,10**-3,10000))
p.plot(x,t)
p.xlabel("H(t)")
p.ylabel("time")
p.grid(True)
p.title("highpass time- impulse response")
#p.show()
w=p.logspace(0,8,801)
ss=1j*w
hf=lambdify(s,Vo,'numpy')
v=hf(ss)
p.loglog(w,abs(v),lw=2)
p.grid(True)
p.xlabel("Frequency")
p.ylabel("H(jw)")
p.title("highpass frequency-impulse response")
#p.show()
#=-------------------step response
A,b,V=highpass(1e4,1e4,1e-9,1e-9,1.586,10000,1/s)
Vo=V[3]
X1 = get_lti(Vo)
t,x = sp.impulse(X1,None,npm.linspace(0,10**-3,10000))
p.plot(t,x)
p.xlabel("h(t)")
p.ylabel("time")
p.grid(True)
p.title("highpass time -step response")
#p.show()
w=p.logspace(0,8,801)
ss=1j*w
hf=lambdify(s,Vo,'numpy')
v=hf(ss)
p.loglog(w,abs(v),lw=2)
p.grid(True)
p.xlabel("H(jw)")
p.ylabel("frequency")
p.grid(True)
p.title("highpass frequency-step response")
p.show()



#-----------------part 4 
t = p.arange(0,10*10**-3,10**-7)
V_i = p.sin(2*3.14*(10**3)*t)*p.exp(-t*2000)
t,V,svsec = sp.lsim(H1,V_i,t)
p.plot(t,V)
p.xlabel("Time")
p.ylabel("Output")
p.title("plot of filter for w = 10^3")
#p.show()

#-------------------
#t = p.arange(0,10**-1,10**-4)
V_i = p.sin(2*3.14*(10**-2)*t)*p.exp(-2000*t)
t,V,svsec = sp.lsim(H1,V_i,t)
p.plot(t,V)
p.xlabel("Time")
p.ylabel("Output")
p.title("plot of the filter at w = 10^2")
#p.show()
#------------------
#t = p.arange(0,10**-3,10**-7)
V_i = p.sin(2*3.14*(10**4)*t)*p.exp(-2000*t)
t,V,svsec = sp.lsim(H1,V_i,t)
p.plot(t,V)
p.xlabel("Time")
p.ylabel("Output")
p.title("plot of the filter w = 10^4")
#p.show()
#t = p.arange(0,10**-4,10**-8)
V_i = p.sin(2*3.14*(10**5)*t)*p.exp(-2000*t)
t,V,svsec = sp.lsim(H1,V_i,t)
p.plot(t,V)
p.xlabel("Time")
p.ylabel("Output")
p.title("plot of the filter at w = 10^5")
#p.show()
#t = p.arange(0,10**-5,10**-9)
V_i = p.sin(2*3.14*(10**6)*t)*p.exp(-2000*t)
t,V,svsec = sp.lsim(H1,V_i,t)
p.plot(t,V)
p.xlabel("Time")
p.ylabel("Output")
p.title("plot of the filter at w = 10^6")
#p.show()

#t = p.arange(0,10**-6,10**-1)
V_i = p.sin(2*3.14*(10**7)*t)*p.exp(-2000*t)
t,V,svsec = sp.lsim(H1,V_i,t)
p.plot(t,V)
p.xlabel("Time")
p.ylabel("Output")
p.title("plot of the filter at w = 10^7 ")
p.legend(("w = 10**3","w = 10**4","w = 10**5","w = 10**6","w = 10**7"),loc = 'best')
p.show()
